services:
  mongo:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: bookecommerce
    ports:
      - "27017:27017"
    volumes:
      - ./DB/mongo_data:/data/db
    networks:
      - bookecommerce_network

  product_postgres:
    image: postgres:latest
    container_name: product_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: product_postgres
      PG_DATA: /var/lib/postgresql/data
    ports:
      - "5001:5432"
    volumes:
      - ./DB/product_postgres_data:/var/lib/postgresql/data
    networks:
      - bookecommerce_network

  user_postgres:
    image: postgres:latest
    container_name: user_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user_postgres   
      PG_DATA: /var/lib/postgresql/data
    ports:
      - "5002:5432"
    volumes:
      - ./DB/user_postgres_data:/var/lib/postgresql/data
    networks:
      - bookecommerce_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - bookecommerce_network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    networks:
      - bookecommerce_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    build: ./service/order-service
    container_name: order_service
    environment:
      MONGO_URL: "mongodb://root:password@mongo:27017/bookecommerce?authSource=admin"
    depends_on:
      - mongo
      - kafka
    ports:
      - "3003:3003"
    volumes:
      - ./service/order-service:/app/service/order-service
    networks:
      - bookecommerce_network

  product-service:
    build: ./service/product-service
    container_name: product_service
    environment:
      DATABASE_URL: "postgres://postgres:postgres@product_postgres:5432/product_postgres"
    depends_on:
      - product_postgres
    ports:
      - "3001:3001"
      - "50052:50052"
    volumes:
      - ./service/product-service:/app/service/product-service
      - /app/service/product-service/node_modules
    networks:
      - bookecommerce_network

  user-service:
    build: ./service/user-service
    container_name: user_service
    environment:
      DATABASE_URL: "postgres://postgres:postgres@user_postgres:5432/user_postgres"
    depends_on:
      - user_postgres
    ports:
      - "3002:3002"
      - "50051:50051"
    volumes:
      - ./service/user-service:/app/service/user-service
      - /app/service/user-service/node_modules
    networks:
      - bookecommerce_network

  notification-service:
    build: ./service/notification-service
    container_name: notification_service
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - bookecommerce_network
    # Add restart policy
    restart: unless-stopped

  nginx:
    image: nginx:latest
    container_name: nginx_gateway
    ports:
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - product-service
      - user-service
      - order-service
    networks:
      - bookecommerce_network

volumes:
  postgres_data:
  mongo_data:

networks:
  bookecommerce_network:
    driver: bridge